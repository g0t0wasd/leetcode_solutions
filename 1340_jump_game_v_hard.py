from typing import List


class Solution:
    def maxJumps(self, arr: List[int], d: int) -> int:
        self.dp = {}
        self.d = d
        self.arr = arr

        res = 0
        for i in range(len(self.arr)):
            current_res = self.dfs(i)
            if current_res > res:
                res = current_res

        return res

    def dfs(self, i):
        if i in self.dp:
            return self.dp[i]

        current_path = 0

        # check to the right
        for j in range(i + 1, i + self.d + 1):
            if len(self.arr) <= j or self.arr[j] >= self.arr[i]:
                break

            current_path = max(self.dfs(j), current_path)

        # check the left side
        for j in range(i - 1, i - self.d - 1, -1):
            if j < 0 or self.arr[j] >= self.arr[i]:
                break

            current_path = max(self.dfs(j), current_path)

        self.dp[i] = current_path + 1
        return self.dp[i]


assert Solution().maxJumps([6,4,14,6,8,13,9,7,10,6,12], 2) == 4
assert Solution().maxJumps([3,3,3,3,3], 3) == 1
assert Solution().maxJumps([7,6,5,4,3,2,1], 1) == 7
assert Solution().maxJumps([53523,68175,27436,65295,65219,34581,50376,58529,81340,30689,82209,93799,10602,72732,12652,45987,18537,48749,92162,96477,76557,6018,8624,51838,80126,34501,20522,90762,36500,86637,11840,82651,95619,24030,40213,25333,74239,22973,20909,70882,18131,49502,54694,48936,90923,28336,57620,84898,14122,73366,82174,48400,35968,73273,81620,62786,12275,14230,3982,86707,83222,72799,51713,89881,88351,83993,21355,75954,34937,91811,67446,88886,82341,63171,60352,17676,53950,96425,14157,75620,78920,30400,46458,7474,52955,55918,21635,76720,73692,92911,3300,4601,52538,55583,45951,89917,97698,7357,64449,34079,97818,47774,31606,71107,38558,86350,11992,23813,89914,13876,67342,64587,18403,89236,34384,86291,10201,41942,67087,90267,53579,51674,21259,70861,67221,55258,20134,91912,99572,94945,80297,21898,21941,62404,19753,87202,37023,15732,45230,8,70401,85170,19395,31735,47147,4575,79254,62927,76198,48297,16991,7828,68629,44381,22754,53727,38754,45588,61771,83141,33142,48409,5445,80629,32844,3207,47474,25588,40173,46338,41173,26965,93865,57467,45891,48528,65125,99962,61751,95506,67940,10249,38687,21586,85693,39886,90353,22593,22127,20945,9229,1396,26956,7395,84991,53291,70596,63673,65362,4461,80635,72190,52481,54349,22357,76251,480,30546,24801,54580,57803,67884,61964,5423,64447,60004,43465,30341,28980,4237,33863,46566,8104,66902,24173,1567,95035,72057,18651,92095,43938,25803,19695,70739,95993,18475,45606,62841,57706,53438,20446,85029,73374,59864,85735,19777,81897,27327,74823,98064,90810,26899,47374,67467,20270,67637,85390,96444,93338,89964,954,83103,97423,2066,37155,27611,45226,28062,2356,52294,39616,92519,65848,38575,49282,71470,12642,68677,22298,34373,6077,40440,63908,86768,6262,57979,95041,25365,27238,43459,84085,58127,88780,62277,16293,99518,92229,90629,8816,23600,2959,69112,61893,13460,43940,78378,86904,92185,59541,66617,52893,76305,25401,29657,50013,25068,41225,56753,10634,16738,68387,12694,87655,29096,10180,26742,76227,59846,64236,79098,62683,93700,51593,27058,41900,97568,6513,8207,48021,11800,79021,95353,94392,18252,57376,95365,7509,94673,98231,26186,23760,5159,83447,46962,35601,42168,67733,93910,53956,15145,53615,90988,84065,71566,4366,27968,37175,40905,69059,19978,22899,22121,49569,54102,8325,56087,61876,2723,64474,5556,56151,73605,57763,91721,30768,91964,92912,96307,39560,38216,81606,64962,97187,56931,78125,61070,90760,32478,46179,94749,6384,94652,21891,25299,42414,16412,21641,60908,78261,56426,45917,93611,63351,1401,6487,49494,50383,50660,85830,93690,96236,86909,69123,96056,72332,4988,99931,78911,45995,31595,14139,88706,79056,52129,28751,57743,69033,18598,14804,4753,45566,6806,23077,69214,67767,33587,99853,44991,94293,3224,49744,48338,28169,71923,58191,22051,48495,74205,266,74895,51925,80650,20408,3482,96385,65582,50180,96612,22898,69000,1740,76103,988,65008,49747,8796,40351,75350,67857,7137,42215,24374,16941,97981,88016,64299,40375], 175) == 21
